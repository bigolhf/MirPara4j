/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package no.uio.medisin.bag.jmirpara.utilities;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Take the Mature.fa file from a MirBase release and convert it to a more
 * convenient format for MiRPara
 * 
 * We could use the fasta file as input, but this format is less readily
 * searchable except using grep
 * 
 * @author sr
 */

public class GenMirnaDataFromMirbase {

    static String FileSeparator = System.getProperty("file.separator");

    static Logger logger = LogManager.getRootLogger();
    static Options options = new Options();
    
    static private String matureFAFile;
    static private String outputFile;
    
    public static void main (String [] args) throws IOException{
        
        options.addOption("m", "mature", true, "absolute path to mature fasta file from miRBase release");
        options.addOption("o", "output", true, "output filename");
        
        logger.info("generate miRPara datafile from mature.fa file in miRBase release");
        
        CommandLineParser parser = new BasicParser();
        
        GenMirnaDataFromMirbase base2para = new GenMirnaDataFromMirbase();
        
        try{
            CommandLine cmd = parser.parse(options, args);
            if(cmd.hasOption("m")){
                logger.info("input file");
                matureFAFile = cmd.getOptionValue("m");
                logger.info("--" + matureFAFile);
            }
            
            if(cmd.hasOption("o")){
                logger.info("output file");
                outputFile = cmd.getOptionValue("o");
                logger.info("--" + outputFile);
            }
        }
        catch(ParseException exPE){
            logger.error("error parsing parameters \n" + exPE);
        }
        
        base2para.convertMatureFA2MirparaData();
        
    }
    
    /**
     * 
     * convert the fasta file generated by miRBase to a more convenient
     * format for use by miRPara.
     * 
     * We assume input file is well formed and don't perform any complex
     * error checking
     * 
     * @throws IOException 
     */
    public void convertMatureFA2MirparaData() throws IOException {
        if((new File(matureFAFile)).exists() == false){
            throw new IOException("input mature.fa file " + (new File(matureFAFile)).getParentFile() + " not found");
        }
        
        if((new File(outputFile)).getParentFile().exists() == false){
            throw new IOException("output file folder" + outputFile + " not found");
        }

        BufferedReader brFA = new BufferedReader(new FileReader(new File(matureFAFile)));
        BufferedWriter bwOut = new BufferedWriter(new FileWriter(new File(outputFile)));
        
            String headerLine = null;
            while((headerLine = brFA.readLine()) != null){
                if(headerLine.startsWith(">")==false){
                    throw new IOException("bad input fasta format\n" + "header line " + headerLine + " does not begin with '>'" );
                }
                String SequenceLine = brFA.readLine();
                
                String tokens[] = headerLine.substring(1).split(" ");
                String miRName  = headerLine.substring(1).split(" ")[0];
                String miRID    = headerLine.substring(1).split(" ")[1];
                
                bwOut.write(SequenceLine + "\t" + miRName + "\t" + miRID  + "\n");
            }
        
        bwOut.close();
        brFA.close();
    }
}
